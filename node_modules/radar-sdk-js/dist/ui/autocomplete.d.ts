import type { RadarAutocompleteUIOptions, RadarAutocompleteConfig, Location } from '../types';
declare class AutocompleteUI {
    config: RadarAutocompleteConfig;
    isOpen: boolean;
    results: any[];
    highlightedIndex: number;
    debouncedFetchResults: (...args: any[]) => Promise<any>;
    near?: string;
    container: HTMLElement;
    inputField: HTMLInputElement;
    resultsList: HTMLElement;
    wrapper: HTMLElement;
    poweredByLink?: HTMLElement;
    static createAutocomplete(autocompleteOptions: RadarAutocompleteUIOptions): AutocompleteUI;
    constructor(options?: Partial<RadarAutocompleteUIOptions>);
    handleInput(): void;
    debounce(fn: Function, delay: number): (...args: any[]) => Promise<unknown>;
    fetchResults(query: string): Promise<import("../types").RadarAutocompleteAddress[]>;
    displayResults(results: any[]): void;
    open(): void;
    close(e?: FocusEvent): void;
    goTo(index: number): void;
    handleKeyboardNavigation(event: KeyboardEvent): void;
    select(index: number): void;
    clearResultsList(): void;
    remove(): void;
    setNear(near: string | Location | undefined | null): this;
    setPlaceholder(placeholder: string): this;
    setDisabled(disabled: boolean): this;
    setResponsive(responsive: boolean): this;
    setWidth(width: number | string | null): this;
    setMaxHeight(height: number | string | null): this;
    setMinCharacters(minCharacters: number): this;
    setLimit(limit: number): this;
    setLang(lang: string | null): this;
    setPostalCode(postalCode: string | null): this;
    setShowMarkers(showMarkers: boolean): this;
    setMarkerColor(color: string): this;
    setHideResultsOnBlur(hideResultsOnBlur: boolean): this;
}
export default AutocompleteUI;
